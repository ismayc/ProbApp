{
    "contents" : "\n# This is the server logic for a Shiny web application.\n# You can find out more about building applications with Shiny here:\n# \n# http://www.rstudio.com/shiny/\n#\n\nif (!(\"shiny\" %in% names(installed.packages()[,\"Package\"]))) {install.packages(\"shiny\")}\nsuppressMessages(library(shiny, quietly = TRUE))\n\nif (!(\"ggplot2\" %in% names(installed.packages()[,\"Package\"]))) {install.packages(\"ggplot2\")}\nsuppressMessages(library(ggplot2, quietly = TRUE))\n\nsource(\"functions.R\")\nsource(\"formulas.R\")\n\nshinyServer(function(input, output, session) {\n  \n  #Select distribution after choosing Discrete or Continuous type\n  output$distName <- renderUI({\n    if(is.null(input$distType)) return ()\n    if(input$distType==\"Discrete\"){\n      radioButtons(\"distrib\",\"\",selected=\"bin\",\n                   list(\"Bernoulli\"=\"bern\",\n                        \"Binomial\"=\"bin\",\"Discrete Uniform\"=\"dunif\",\n                        \"Geometric\"=\"geom\",\"Hypergeometric\"=\"hgeom\",\n                        \"Negative Binomial\"=\"nbin\",\"Poisson\"=\"poi\")\n      )\n    } else if(input$distType==\"Continuous\"){\n      radioButtons(\"distrib\",\"\",\n                   selected=\"exp\",\n                   list(#\"Beta\"=\"beta\",\"Cauchy\"=\"cauchy\",\n                     #\"Chi-squared\"=\"chisq\",\n                     \"Exponential\"=\"exp\",\n                     #\"F\"=\"F\",\n                     \"Gamma\"=\"gam\",\n                     #\"Laplace\"=\"lap\",\n                     #\"Logistic\"=\"logi\",\n                     #\"Log-Normal\"=\"lognorm\",\n                     \"Normal\"=\"norm\",\n                     #\"Pareto\"=\"pareto\",\"t\"=\"t\",\n                     \"Uniform\"=\"unif\")\n                   #\"Weibull\"=\"weib\")\n      )\n    }\n  })\n  \n  output$probTypeSelect <- renderUI({\n    if(input$outType == \"Probability\"){\n      selectInput(\"probType\", label = h5(\"Select probability type:\"), \n                  selected=\"lowerTail\",\n                  list(\"Less Than or Equal To\" = \"lowerTail\",\n                       \"Between Values (Inclusive)\" = \"between\",\n                       \"Greater Than or Equal To\" = \"upperTail\",\n                       \"More Extreme\" = \"extreme\")\n      )\n    }\n  })\n  \n  ##########################################\n  #Formulas for the distributions          #\n  ##########################################\n  #Formulas defined in formulas.R file\n  output$formulas <- renderUI({  \n    if(is.null(input$distrib)) return ()\n    if(input$outType == \"Formulas\"){\n      switch(input$distrib,\n             #Discrete\n             bern = bernForm,\n             bin = binForm,\n             dunif = discUnifForm,\n             geom = geomForm,\n             hgeom = hyperGeomForm,\n             nbin = negBinForm,\n             poi = poiForm,\n             #Continuous\n             exp = expForm,\n             gam = gamForm,\n             norm = normForm,\n             unif = unifForm,\n      )\n    }\n  })\n  \n  #Prompt for first input value\n  output$fixedVal1 <- renderUI({\n    if(is.null(input$probType)) return ()\n    if(input$outType != \"Formulas\"){\n      switch(input$outType,\n             PDF = if(input$percentile == \"quant\" && !is.null(input$percentile)) return () \n                   else numericInput(\"xFixed\", withMathJax('Enter a discrete value (\\\\(x\\\\)):'), 4.0),\n             CDF = numericInput(\"xFixed\", withMathJax('Enter a discrete value (\\\\(x\\\\)):'), 1.0),\n             Probability = switch(input$probType,\n                                  \"between\" = numericInput(\"x1\", \n                                                           withMathJax('Enter lower value (\\\\(x_1\\\\)):'), 4),\n                                  \"lowerTail\" = numericInput(\"xFixed\", \n                                                             withMathJax('Enter a discrete value (\\\\(x\\\\)):'), 4),\n                                  \"upperTail\" = numericInput(\"xFixed\", \n                                                             withMathJax('Enter a discrete value (\\\\(x\\\\)):'), 4),\n                                  \"extreme\" = numericInput(\"x1\", \n                                                           withMathJax('Enter lower value (\\\\(x_1\\\\)):'), 4),\n                                  NULL \n             )\n      )\n    }\n  })\n\n  #Prompt for second input value if needed\n  output$fixedVal2 <- renderUI({\n    if(is.null(input$probType) || is.null(input$x1)) return ()\n    if(input$outType != \"Formulas\"){\n      switch(input$outType, \n             Probability = switch(input$probType,\n                                  \"between\" = numericInput(\"x2\", \n                                                           withMathJax('Enter upper value (\\\\(x_2\\\\)):'), 6,\n                                                           min = input$x1 + 1),\n                                  \"extreme\" = numericInput(\"x2\", \n                                                           withMathJax('Enter upper value (\\\\(x_2\\\\)):'), 6,\n                                                           min = input$x1 + 1),\n                                  NULL\n             ),\n             NULL\n      )\n    }\n  }) \n  \n  \n  #Prompt for first input parameter into distribution\n  output$param1 <- renderUI({\n    if(is.null(input$distrib)) return ()\n    if(input$outType != \"Formulas\"){\n      switch(input$distrib, \n             #####Zero is not really a valid entry but the input boxes act \n             ##### strangely when you enter 0.001 or smaller\n             #Discrete\n             bern = numericInput(\"p\", withMathJax('Enter the probability of success (\\\\(p\\\\)):'), 0.5, \n                                 step=0.1, min=0, max=1),\n             bin = numericInput(\"p\", withMathJax('Enter the probability of success (\\\\(p\\\\)):'), 0.5,\n                                step=0.1, min=0, max=1),\n             geom = numericInput(\"p\", withMathJax('Enter the probability of success (\\\\(p\\\\)):'), 0.5,\n                                 step=0.1, min=0, max=1),\n             dunif = numericInput(\"a\", withMathJax('Enter the lower bound (\\\\(a\\\\)):'),1),\n             nbin = numericInput(\"p\", withMathJax('Enter the probability of success (\\\\(p\\\\)):'), 0.5,\n                                 step=0.1, min=0, max=1),\n             poi = numericInput(\"lambda\", withMathJax('Enter the rate parameter (\\\\(\\\\lambda\\\\)):'), 4,\n                                step = 1, min = 0), \n             hgeom = numericInput(\"numEvents\", \n                                  withMathJax('Enter the total number of events (\\\\(N\\\\)) i.e. total number of balls:'), 10,\n                                  step=1, min=1),\n             #Continuous\n             exp = numericInput(\"beta\", withMathJax('Enter the scale parameter of the distribution (\\\\(\\\\beta\\\\)):'), 5.0,\n                                min = 0),\n             gam = numericInput(\"beta\", withMathJax('Enter the scale parameter of the distribution (\\\\(\\\\beta\\\\)):'), 5.0,\n                                min = 0),\n             norm = numericInput(\"normMean\", withMathJax('Enter the mean of the distribution (\\\\(\\\\mu\\\\)):'), 0.0),\n             unif = numericInput(\"theta1\", withMathJax('Enter the lower bound of the distribution (\\\\(\\\\theta_1\\\\)):'), 0.0),\n      )\n    }\n  })\n\n  #Prompt for second input parameter into distribution\n  output$param2 <- renderUI({\n    if(is.null(input$distrib)) return ()\n    if(input$outType != \"Formulas\"){\n      switch(input$distrib,\n             bin = numericInput(\"numTrials\", withMathJax('Enter the number of trials (\\\\(n\\\\)):'), 15,\n                                step = 1, min=1),\n             dunif = numericInput(\"b\", \n                                  withMathJax('Enter the upper bound (\\\\(b\\\\)) where \\\\(b > a\\\\):'), 6),\n                                  # min=input$a + 1),\n             nbin = numericInput(\"numSuccesses\", withMathJax('Enter the number of successes (\\\\(r\\\\)):'), 2,\n                                 step = 1, min=1),\n             hgeom = numericInput(\"numTrials\", \n                                  withMathJax('Enter the number of trials (\\\\(n\\\\)) where \\\\(n < N \\\\) i.e. number of balls chosen:'), 5,\n                                  step=1, min=0),\n                                  #, max = input$numEvents - 1),\n             #Continuous\n             gam = numericInput(\"alpha\", withMathJax('Enter the shape parameter of the distribution (\\\\(\\\\alpha\\\\)):'), 2.0,\n                                min = 0),\n             norm = numericInput(\"normVar\", withMathJax('Enter the variance of the distribution (\\\\(\\\\sigma^2\\\\)):'), 1.0,\n                                 min=0),\n             unif = numericInput(\"theta2\", withMathJax('Enter the upper bound of the distribution (\\\\(\\\\theta_2\\\\)):'), 5.0),\n             NULL\n      )\n    }\n  })\n\n  #Prompt for third input parameter into distribution  \n  output$param3 <- renderUI({\n    if(is.null(input$distrib)) return ()\n    if(input$outType != \"Formulas\"){\n      switch(input$distrib,\n             hgeom = numericInput(\"favBalls\", \n                                  withMathJax('Enter the total number of favorable events (\\\\(m\\\\)) where \\\\(m < N \\\\) i.e. total number of white balls:'), 3,\n                                  step=1, min=0),\n                                  #max=input$numEvents -1),\n             NULL\n      )\n    }\n  })\n  \n  output$distribPlot <- renderPlot({\n    #To allow for the parameters to fill before calculating/plotting\n    if(is.null(input$distrib)) return ()\n    if(is.null(input$probType)) return()\n    if(input$distrib == \"bern\" && is.null(input$p)) return ()\n    else if(input$distrib == \"bin\" && (is.null(input$numTrials) || is.null(input$p))) return ()\n    else if(input$distrib == \"dunif\" && (is.null(input$a) || is.null(input$b))) return ()\n    else if(input$distrib == \"geom\" && is.null(input$p)) return ()\n    else if(input$distrib == \"hgeom\" && (is.null(input$numTrials) || is.null(input$numEvents) || is.null(input$favBalls))) return ()\n    else if(input$distrib == \"nbin\" && (is.null(input$p) || is.null(input$numSuccesses))) return ()\n    else if(input$distrib == \"poi\" && is.null(input$lambda)) return ()\n    else if(input$distrib == \"exp\" && is.null(input$beta)) return ()\n    else if(input$distrib == \"gam\" && (is.null(input$beta) || is.null(input$alpha))) return ()\n    else if(input$distrib == \"norm\" && (is.null(input$normMean) || is.null(input$normVar))) return ()\n    else if(input$distrib == \"unif\" && (is.null(input$theta1) || is.null(input$theta2))) return ()\n    \n    if(input$outType == \"PDF\" && input$percentile == \"pdf\" && !is.null(input$percentile)){\n      if(is.null(input$xFixed)) return ()\n      \n      #Plot PDF function using the distribPlot function in functions.R with shading of parameter value\n      switch(input$distrib, \n             \"bern\" = distribPlot(func = dbinom, args = c(1, input$p), inputValue = input$xFixed),\n             \n             \"bin\" = distribPlot(range = 0:input$numTrials, args = c(input$numTrials, input$p), \n                                 inputValue = input$xFixed, distribName = \"Binomial\"),\n             \n             \"dunif\" = distribPlot(func = dunifdisc, range = input$a:input$b, args = c(input$a, input$b),\n                                   inputValue = input$xFixed, xlabel = \"Discrete Values\",\n                                   distribName = \"Discrete Uniform\"),\n             \n             \"geom\" = distribPlot(func = dgeom, range = 1:ceiling(4*1/input$p), args = c(input$p),\n                                  inputValue = input$xFixed, xlabel = \"Number of Trials\",\n                                  distribName = \"Geometric\", numArgs = 1, paramAdjust = 1),\n             \n             \"hgeom\" = distribPlot(func = dhyper, \n                                   range = max(0, input$numTrials+input$favBalls-input$numEvents):min(input$favBalls, input$numTrials), \n                                   args = c(input$favBalls, (input$numEvents - input$favBalls), input$numTrials),\n                                   inputValue = input$xFixed, distribName = \"Hypergeometric\", numArgs = 3),\n             \n             \"nbin\" = distribPlot(func = dnbinom, range = input$numSuccesses:ceiling(7*1/input$p), \n                                  args = c(input$numSuccesses, input$p),\n                                  inputValue = input$xFixed, xlabel = \"Number of Trials\",\n                                  distribName = \"Negative Binomial\", paramAdjust = input$numSuccesses),\n             \n             \"poi\" = distribPlot(func = dpois, range = 0:ceiling(4*input$lambda),\n                                 args = c(input$lambda), inputValue = input$xFixed,\n                                 xlabel = \"Number of Occurrences\",\n                                 distribName = \"Poisson\", numArgs = 1),\n             \n             #Continuous\n             \"norm\" = normal_prob_area_plot(input$xFixed, input$xFixed, \n                                            mean = input$normMean, sd = sqrt(as.numeric(input$normVar))),\n             \"unif\" = uniform_prob_area_plot(input$xFixed, input$xFixed, min = input$theta1, max = input$theta2),\n             \"exp\" = exp_prob_area_plot(input$xFixed, input$xFixed, shape = 1, scale = input$beta),\n             \"gam\" = gamma_prob_area_plot(input$xFixed, input$xFixed, shape = input$alpha, scale = input$beta),\n             #NULL\n      )\n    } \n    \n    ######Need to put into function similar to distribPlot above\n    #Plot PDF function with shading of appropriate quantile value\n    else if(input$outType == \"PDF\" && input$percentile != \"pdf\" && !is.null(input$percentile)){\n      switch(input$distrib,\n      \"bern\" = qplot(factor(0:1), \n                     dbinom(0:1, 1, input$p),\n                     xlab = \"Number of Successes\", \n                     ylab = \"Probability\", \n                     main = \"Bernoulli Probability Mass Function\\n\",\n                     geom = \"bar\", \n                     stat = \"identity\",\n                     fill = 0:1 <= if(!is.null(input$quantile) && !is.null(input$p))\n                                      qbinom(input$quantile, 1, input$p)\n                                  else {-1}\n      )\n      + scale_fill_manual(values= if(!is.null(input$quantile) && !is.null(input$p) && qbinom(input$quantile, 1, input$p) == 1) c(\"#00BA38\", \"black\")\n                                  else c(\"black\", \"#00BA38\")\n      )\n      + guides(fill=FALSE),\n      \"bin\" = qplot(factor(0:input$numTrials), \n                    dbinom(0:input$numTrials, input$numTrials, input$p),\n                    xlab = \"Number of Successes\", \n                    ylab = \"Probability\", \n                    main = \"Binomial Probability Mass Function\\n\",\n                    geom = \"bar\", \n                    stat = \"identity\",\n                    fill = 0:input$numTrials <= if(!is.null(input$quantile) && !is.null(input$numTrials) && !is.null(input$p))\n                                                    qbinom(input$quantile, input$numTrials, input$p)\n                                                else {-1}\n      )\n      #To get the default shading colors to black with green\n      + scale_fill_manual(values= \n          if (!is.null(input$quantile) && !is.null(input$numTrials) && !is.null(input$p) && \n                qbinom(input$quantile, input$numTrials, input$p) == input$numTrials){c(\"#00BA38\", \"#000000\")}\n          else{c(\"#000000\", \"#00BA38\")})\n      + guides(fill=FALSE), \n      \"dunif\" = qplot(factor(input$a:input$b), \n                      dunifdisc(input$a:input$b, input$a, input$b),\n                      xlab = \"Number of Successes\", \n                      ylab = \"Probability\", \n                      main = \"Discrete Uniform Probability Mass Function\\n\",\n                      geom = \"bar\", \n                      stat = \"identity\",\n                      fill =  input$a:input$b <= if(!is.null(input$quantile) && !is.null(input$a) && !is.null(input$b))\n                                                    qunifdisc(input$quantile, input$a, input$b)\n                                                else {-1}\n      )\n      #To get the default shading colors to black with green\n      + scale_fill_manual(values= \n                            if (!is.null(input$quantile) && !is.null(input$a) && !is.null(input$b) &&\n                                  qunifdisc(input$quantile, input$a, input$b) == input$b){c(\"#00BA38\", \"#000000\")}\n        else{c(\"#000000\", \"#00BA38\")})\n      + guides(fill=FALSE),\n      \"geom\" = qplot(factor(1:ceiling(4*1/input$p)),  ##### How large to set the bounds?\n                     dgeom(1:ceiling(4*1/input$p)-1, input$p),\n                     xlab = \"Number of Trials\", \n                     ylab = \"Probability\", \n                     main = \"Geometric Probability Mass Function\\n\",\n                     geom = \"bar\", \n                     stat = \"identity\",\n                     fill = 1:ceiling(4*1/input$p) <= if(!is.null(input$quantile) && !is.null(input$p))\n                                                          qgeom(as.numeric(input$quantile), as.numeric(input$p)) + 1\n                                                      else {-1}   \n      )\n      #To get the default shading colors to black with green\n      + scale_fill_manual(values= \n          if (!is.null(input$quantile) && !is.null(input$p) && \n                ceiling(4*1/input$p) <= qgeom(as.numeric(input$quantile), as.numeric(input$p)) + 1){c(\"#00BA38\", \"#000000\")}\n        else{c(\"#000000\", \"#00BA38\")})\n      + guides(fill=FALSE), \n      \"hgeom\" = qplot(factor(max(0, input$numTrials+input$favBalls-input$numEvents):min(input$favBalls, input$numTrials)), \n                      dhyper(max(0, input$numTrials+input$favBalls-input$numEvents):min(input$favBalls, input$numTrials), \n                             input$favBalls, (input$numEvents - input$favBalls), input$numTrials),\n                      xlab = \"Number of Successes\", \n                      ylab = \"Probability\", \n                      main = \"Hypergeometric Probability Mass Function\\n\",\n                      geom = \"bar\", \n                      stat = \"identity\",\n                      fill = max(0, input$numTrials+input$favBalls-input$numEvents):min(input$favBalls, input$numTrials) \n                              <= if(!is.null(input$quantile) && !is.null(input$favBalls) && !is.null(input$numEvents) && !is.null(input$numTrials))\n                                                      qhyper(as.numeric(input$quantile), as.numeric(input$favBalls), \n                                                        (as.numeric(input$numEvents) - as.numeric(input$favBalls)), \n                                                        as.numeric(input$numTrials))\n                                                 else {-1}\n      )\n      + scale_fill_manual(values= \n          if ((!is.null(input$quantile) && !is.null(input$favBalls) && !is.null(input$numEvents) && !is.null(input$numTrials)) &&\n                qhyper(as.numeric(input$quantile), as.numeric(input$favBalls), (as.numeric(input$numEvents) - as.numeric(input$favBalls)), \n                     as.numeric(input$numTrials)) == input$favBalls){c(\"#00BA38\", \"#000000\")}\n        else{c(\"#000000\", \"#00BA38\")})\n      + guides(fill=FALSE), \n      \"nbin\" = qplot(factor(input$numSuccesses:ceiling(7*1/input$p)), \n                     dnbinom(input$numSuccesses:ceiling(7*1/input$p), input$numSuccesses, input$p),\n                     xlab = \"Number of Successes\", \n                     ylab = \"Probability\", \n                     main = \"Negative Binomial Probability Mass Function\\n\",\n                     geom = \"bar\", \n                     stat = \"identity\",\n                     fill = input$numSuccesses:ceiling(7*1/input$p) <= if(!is.null(input$quantile) && !is.null(input$numSuccesses) && !is.null(input$p))\n                                                                          qnbinom(as.numeric(input$quantile), \n                                                                               as.numeric(input$numSuccesses), as.numeric(input$p)) + as.numeric(input$numSuccesses)\n                                                                      else {-1}\n      )\n      + scale_fill_manual(values=  if(!is.null(input$quantile) && !is.null(input$numSuccesses) && !is.null(input$p) &&\n                                        ceiling(7*1/input$p) <= qnbinom(as.numeric(input$quantile), \n                                                                      as.numeric(input$numSuccesses), \n                                                                      as.numeric(input$p)) + as.numeric(input$numSuccesses)){c(\"#00BA38\", \"#000000\")}\n        else{c(\"#000000\", \"#00BA38\")})\n      + guides(fill=FALSE), \n      \"poi\" = qplot(factor(0:ceiling(4*input$lambda)),\n                    dpois(0:ceiling(4*input$lambda), input$lambda),\n                    xlab = \"Number of Occurrences\", \n                    ylab = \"Probability\", \n                    main = \"Poisson Probability Mass Function\\n\",\n                    geom = \"bar\", \n                    stat = \"identity\",\n                    fill = 0:ceiling(4*input$lambda) <= if(!is.null(input$quantile) && !is.null(input$lambda))\n                                                            qpois(input$quantile, input$lambda)\n                                                        else {-1}\n      )\n      #To get the default shading colors to black with green\n      + scale_fill_manual(values= if(!is.null(input$quantile) && !is.null(input$lambda) && \n                                       ceiling(4*input$lambda) <= qpois(input$quantile, input$lambda)){c(\"#00BA38\", \"#000000\")}\n        else{c(\"#000000\", \"#00BA38\")})\n      + guides(fill=FALSE),\n      \n      #Continuous\n      \"norm\" = normal_prob_area_plot(floor(as.numeric(input$normMean) - 4 * sqrt(as.numeric(input$normVar))), \n                                     qnorm(as.numeric(input$quantile), as.numeric(input$normMean), sqrt(as.numeric(input$normVar))), \n                                     mean = as.numeric(input$normMean), sd = sqrt(as.numeric(input$normVar))\n      ),\n      \"unif\" = uniform_prob_area_plot(input$theta1, \n                                      qunif(input$quantile, as.numeric(input$theta1), as.numeric(input$theta2)), \n                                      min = as.numeric(input$theta1), \n                                      max = as.numeric(input$theta2)\n\n      ),\n      \"exp\" = exp_prob_area_plot(0, qgamma(as.numeric(input$quantile), shape = as.numeric(1), scale = as.numeric(input$beta)), \n                                                      shape = 1, scale = as.numeric(input$beta)\n      ),\n      \"gam\" = gamma_prob_area_plot(0, qgamma(as.numeric(input$quantile), \n                                             shape = as.numeric(input$alpha), scale = as.numeric(input$beta)), \n                                  shape = as.numeric(input$alpha), scale = as.numeric(input$beta)\n      )\n      )\n    }\n    #Plot CDF with appropriate shading corresponding to fixed value input\n    else if(input$outType == \"CDF\"){\n      if(is.null(input$xFixed)) return ()\n      switch(input$distrib,\n             \"bern\" = distribPlot(func = pbinom, range = 0:1, args = c(1, input$p),\n                                  inputValue = input$xFixed, xlabel = \"Number of Successes\",\n                                  distribName = \"Bernoulli\", plotType = \"Cumulative\",\n                                  mainLabel = \"Cumulative Distribution Function\"),\n             \n             \"bin\" = distribPlot(func = pbinom, range = 0:input$numTrials, args = c(input$numTrials, input$p),\n                                 inputValue = input$xFixed, xlabel = \"Number of Successes\",\n                                 distribName = \"Binomial\", plotType = \"Cumulative\",\n                                 mainLabel = \"Cumulative Distribution Function\"),\n             \n             \"dunif\" = distribPlot(func = punifdisc, range = input$a:input$b, args = c(input$a, input$b),\n                                   inputValue = input$xFixed, xlabel = \"Discrete Values\",\n                                   distribName = \"Discrete Uniform\", plotType = \"Cumulative\",\n                                   mainLabel = \"Cumulative Distribution Function\"),\n             \n             \"geom\" = distribPlot(func = pgeom, range = 1:ceiling(4*1/input$p), args = c(input$p),\n                                  inputValue = input$xFixed, xlabel = \"Number of Trials\",\n                                  distribName = \"Geometric\", numArgs = 1, paramAdjust = 1,\n                                  plotType = \"Cumulative\",\n                                  mainLabel = \"Cumulative Distribution Function\"),\n             \n             \"hgeom\" = distribPlot(func = phyper, \n                                   range = max(0, input$numTrials+input$favBalls-input$numEvents):min(input$favBalls, input$numTrials), \n                                   args = c(input$favBalls, (input$numEvents - input$favBalls), input$numTrials),\n                                   inputValue = input$xFixed, distribName = \"Hypergeometric\", numArgs = 3,\n                                   plotType = \"Cumulative\",\n                                   mainLabel = \"Cumulative Distribution Function\"),\n             \n             \"nbin\" = distribPlot(func = pnbinom, range = input$numSuccesses:ceiling(7*1/input$p), \n                                  args = c(input$numSuccesses, input$p),\n                                  inputValue = input$xFixed, xlabel = \"Number of Trials\",\n                                  distribName = \"Negative Binomial\", paramAdjust = input$numSuccesses,\n                                  plotType = \"Cumulative\",\n                                  mainLabel = \"Cumulative Distribution Function\"),\n             \n             \"poi\" = distribPlot(func = ppois, range = 0:ceiling(4*input$lambda),\n                                 args = c(input$lambda), inputValue = input$xFixed,\n                                 xlabel = \"Number of Occurrences\",\n                                 distribName = \"Poisson\", numArgs = 1,\n                                 plotType = \"Cumulative\",\n                                 mainLabel = \"Cumulative Distribution Function\"),\n             \n             #Continuous\n             \"norm\" = normal_prob_CDF_plot(input$xFixed, mean = input$normMean, sd = sqrt(input$normVar)),\n             \"unif\" = uniform_prob_CDF_plot(input$xfixed, min = input$theta1, max = input$theta2),\n             \"exp\" = exp_prob_CDF_plot(input$xFixed, shape = 1, scale = input$beta),\n             \"gam\" = gamma_prob_CDF_plot(input$xFixed, shape = input$alpha, scale = input$beta),\n             #NULL\n      )      \n    } \n    #####Need to turn into function calls\n    #Plot PDF with appropriate shading depending on probType selection\n    else if(input$outType == \"Probability\"){\n      if(is.null(input$probType)) return ()\n      if((input$probType == \"lowerTail\" || input$probType == \"upperTail\") && is.null(input$xFixed)) return ()\n      if((input$probType == \"between\" || input$probType == \"extreme\") && (is.null(input$x1) || is.null(input$x2))) return ()\n      switch(input$distrib,\n             \"bern\" = qplot(factor(0:1), \n                            dbinom(0:1, 1, input$p),\n                            xlab = \"Number of Successes\", \n                            ylab = \"Probability\", \n                            main = \"Bernoulli Probability Mass Function\\n\",\n                            geom= \"bar\", \n                            stat= \"identity\",\n                            fill = switch(input$probType,\n                                          \"between\" = 0:1 >= input$x1 & 0:1 <= input$x2,\n                                          \"lowerTail\" = 0:1 <= input$xFixed,\n                                          \"upperTail\" = 0:1 >= input$xFixed,\n                                          \"extreme\" = 0:1 <= input$x1 | 0:1 >= input$x2, \n                            )\n             )\n             + scale_fill_manual(values=\n                                   if(input$probType == \"between\" && pbinom(input$x2, 1, input$p) - pbinom(input$x1 - 1, 1, input$p) == 1){\n                                     c(\"#00BA38\", \"black\")\n                                   }\n                                 else if(input$probType == \"lowerTail\" && pbinom(input$xFixed, 1, input$p) == 1){\n                                   c(\"#00BA38\", \"black\")\n                                 }\n                                 else if (input$probType == \"upperTail\" && 1 - pbinom(input$xFixed - 1, 1, input$p) == 1){\n                                   c(\"#00BA38\", \"black\")\n                                 }\n                                 else if(input$probType == \"extreme\" && 1 - pbinom(input$x2-1, size = 1, input$p) + pbinom(input$x1, 1, input$p) == 1){\n                                   c(\"#00BA38\", \"black\")\n                                 }\n                                 else\n                                   c(\"black\", \"#00BA38\")\n             )\n             + guides(fill=FALSE),\n             \"bin\" = qplot(factor(0:input$numTrials), \n                           dbinom(0:input$numTrials, input$numTrials, input$p),\n                           xlab = \"Number of Successes\", \n                           ylab = \"Probability\", \n                           main = \"Binomial Probability Mass Function\\n\",\n                           geom= \"bar\", \n                           stat= \"identity\",\n                           fill = if(!is.null(input$xFixed)){\n                             switch(input$probType,\n                                         \"between\" = 0:input$numTrials >= input$x1 & 0:input$numTrials <= input$x2,\n                                         \"lowerTail\" = 0:input$numTrials <= input$xFixed,\n                                         \"upperTail\" = 0:input$numTrials >= input$xFixed,\n                                         \"extreme\" = 0:input$numTrials <= input$x1 | 0:input$numTrials >= input$x2, \n                           )\n                           }\n             )\n             #To get the default shading colors to black with green\n             + scale_fill_manual(values= if(input$probType == \"extreme\"){ \n               if(input$x2 - input$x1 > 1){c(\"#000000\", \"#00BA38\")} \n               else{c(\"#00BA38\",\"#000000\")}}\n               else if (input$probType == \"lowerTail\"){\n                 if (pbinom(input$xFixed, input$numTrials, input$p) == 1){c(\"#00BA38\", \"#000000\")}\n                 else{c(\"#000000\",\"#00BA38\")}}\n               else if (input$probType == \"upperTail\"){\n                 if ( pbinom(input$xFixed - 1, input$numTrials, input$p, lower.tail = FALSE) == 1){c(\"#00BA38\", \"#000000\")}\n                 else{c(\"#000000\", \"#00BA38\")}}\n               else if (input$probType == \"between\"){\n                 if (pbinom(as.numeric(input$x2), size = as.numeric(input$numTrials), \n                            prob = as.numeric(input$p)) \n                     - pbinom(as.numeric(input$x1)-1, size = as.numeric(input$numTrials), \n                              prob = as.numeric(input$p)) == 1)\n                 {c(\"#00BA38\", \"#000000\")}\n                 else{c(\"#000000\", \"#00BA38\")}}\n               else{c(\"#000000\", \"#00BA38\")})\n             + guides(fill=FALSE), \n             \"dunif\" = qplot(factor(input$a:input$b), \n                             dunifdisc(input$a:input$b, input$a, input$b),\n                             xlab = \"Number of Successes\", \n                             ylab = \"Probability\", \n                             main = \"Discrete Uniform Probability Mass Function\\n\",\n                             geom = \"bar\", \n                             stat = \"identity\",\n                             fill = if(!is.null(input$xFixed)){\n                               switch(input$probType,\n                                           \"between\" = input$a:input$b >= input$x1 & input$a:input$b <= input$x2,\n                                           \"lowerTail\" = input$a:input$b <= input$xFixed,\n                                           \"upperTail\" = input$a:input$b >= input$xFixed,\n                                           \"extreme\" = input$a:input$b <= input$x1 | input$a:input$b >= input$x2\n                             ) \n                             }\n             )\n             #To get the default shading colors to black with green\n             + scale_fill_manual(values= if(input$probType == \"extreme\"){ \n               if(input$x2 - input$x1 > 1){c(\"#000000\", \"#00BA38\")} \n               else{c(\"#00BA38\",\"#000000\")}}\n               else if (input$probType == \"lowerTail\"){\n                 if (punifdisc(input$xFixed, input$a, input$b) == 1){c(\"#00BA38\", \"#000000\")}\n                 else{c(\"#000000\",\"#00BA38\")}}\n               else if (input$probType == \"upperTail\"){\n                 if (punifdisc(input$xFixed - 1, input$a, input$b) == 0){c(\"#00BA38\", \"#000000\")}\n                 else{c(\"#000000\", \"#00BA38\")}}\n               else if (input$probType == \"between\"){\n                 if (punifdisc(as.numeric(input$x2), as.numeric(input$a), as.numeric(input$b)) \n                     - punifdisc(as.numeric(input$x1)-1, as.numeric(input$a), as.numeric(input$b)) == 1)\n                 {c(\"#00BA38\", \"#000000\")}\n                 else{c(\"#000000\", \"#00BA38\")}}\n               else{c(\"#000000\", \"#00BA38\")})\n             + guides(fill=FALSE),\n             \"geom\" = qplot(factor(1:ceiling(4*1/input$p)),  ##### How large to set the bounds?\n                            dgeom(1:ceiling(4*1/input$p)-1, input$p),\n                            xlab = \"Number of Trials\", \n                            ylab = \"Probability\", \n                            main = \"Geometric Probability Mass Function\\n\",\n                            geom = \"bar\", \n                            stat = \"identity\",\n                            fill = if(!is.null(input$xFixed)){\n                              switch(input$probType,\n                                          \"between\" = 1:ceiling(4*1/input$p) >= input$x1 & 1:ceiling(4*1/input$p) <= input$x2,\n                                          \"lowerTail\" = 1:ceiling(4*1/input$p) <= input$xFixed,\n                                          \"upperTail\" = 1:ceiling(4*1/input$p) >= input$xFixed,\n                                          \"extreme\" = 1:ceiling(4*1/input$p) <= input$x1 | 1:ceiling(4*1/input$p) >= input$x2, \n                            )\n                            }\n             )\n             #To get the default shading colors to black with green\n             + scale_fill_manual(values= if(input$probType == \"extreme\"){ \n               if(input$x2 - input$x1 > 1){c(\"#000000\", \"#00BA38\")} \n               else{c(\"#00BA38\",\"#000000\")}}\n               else if (input$probType == \"lowerTail\"){\n                 if (ceiling(4*1/input$p) <= input$xFixed){c(\"#00BA38\", \"#000000\")}\n                 else{c(\"#000000\",\"#00BA38\")}}\n               else if (input$probType == \"upperTail\"){\n                 if ( 1 >= input$xFixed){c(\"#00BA38\", \"#000000\")}\n                 else{c(\"#000000\", \"#00BA38\")}}\n               else if (input$probType == \"between\"){\n                 if (input$x1 <= 1 && input$x2 >= ceiling(4*1/input$p))\n                 c(\"#00BA38\", \"#000000\")\n                 else{c(\"#000000\", \"#00BA38\")}}\n               else{c(\"#000000\", \"#00BA38\")})\n             + guides(fill=FALSE), \n             \"hgeom\" = qplot(factor(max(0, input$numTrials+input$favBalls-input$numEvents):min(input$favBalls, input$numTrials)), \n                             dhyper(max(0, input$numTrials+input$favBalls-input$numEvents):min(input$favBalls, input$numTrials), \n                                    input$favBalls, (input$numEvents - input$favBalls), input$numTrials),\n                             xlab = \"Number of Successes\", \n                             ylab = \"Probability\", \n                             main = \"Hypergeometric Probability Mass Function\\n\",\n                             geom = \"bar\", \n                             stat = \"identity\",\n                             fill = if(!is.null(input$xFixed)){\n                               switch(input$probType,\n                                           \"between\" = max(0, input$numTrials+input$favBalls-input$numEvents):min(input$favBalls, input$numTrials) >= input$x1 & max(0, input$numTrials+input$favBalls-input$numEvents):min(input$favBalls, input$numTrials) <= input$x2,\n                                           \"lowerTail\" = max(0, input$numTrials+input$favBalls-input$numEvents):min(input$favBalls, input$numTrials) <= input$xFixed,\n                                           \"upperTail\" = max(0, input$numTrials+input$favBalls-input$numEvents):min(input$favBalls, input$numTrials) >= input$xFixed,\n                                           \"extreme\" = max(0, input$numTrials+input$favBalls-input$numEvents):min(input$favBalls, input$numTrials) <= input$x1 | max(0, input$numTrials+input$favBalls-input$numEvents):min(input$favBalls, input$numTrials) >= input$x2, \n                             )\n                             }\n             )\n             + scale_fill_manual(values= if(input$probType == \"extreme\"){ \n               if(input$x2 - input$x1 > 1){c(\"#000000\", \"#00BA38\")} \n               else{c(\"#00BA38\",\"#000000\")}}\n               else if (input$probType == \"lowerTail\"){\n                 if (phyper(input$xFixed, input$favBalls, (input$numEvents - input$favBalls), input$numTrials) == 1){c(\"#00BA38\", \"#000000\")}\n                 else{c(\"#000000\",\"#00BA38\")}}\n               else if (input$probType == \"upperTail\"){\n                 if (phyper(input$xFixed - 1, input$favBalls, (input$numEvents - input$favBalls), input$numTrials) == 0){c(\"#00BA38\", \"#000000\")}\n                 else{c(\"#000000\", \"#00BA38\")}}\n               else if (input$probType == \"between\"){\n                 if (phyper(as.numeric(input$x2), as.numeric(input$favBalls), \n                            as.numeric((input$numEvents - input$favBalls)), as.numeric(input$numTrials)) \n                     - phyper(as.numeric(input$x1) - 1, as.numeric(input$favBalls), \n                              as.numeric((input$numEvents - input$favBalls)), as.numeric(input$numTrials)) == 1)\n                 {c(\"#00BA38\", \"#000000\")}\n                 else{c(\"#000000\", \"#00BA38\")}}\n               else{c(\"#000000\", \"#00BA38\")})\n             + guides(fill=FALSE), \n             \"nbin\" = qplot(factor(input$numSuccesses:ceiling(7*1/input$p)), \n                            dnbinom(input$numSuccesses:ceiling(7*1/input$p), input$numSuccesses, input$p),\n                            xlab = \"Number of Successes\", \n                            ylab = \"Probability\", \n                            main = \"Negative Binomial Probability Mass Function\\n\",\n                            geom = \"bar\", \n                            stat = \"identity\",\n                            fill = if(!is.null(input$xFixed)){\n                              switch(input$probType,\n                                          \"between\" = input$numSuccesses:ceiling(7*1/input$p) >= input$x1 & input$numSuccesses:ceiling(7*1/input$p) <= input$x2,\n                                          \"lowerTail\" = input$numSuccesses:ceiling(7*1/input$p) <= input$xFixed,\n                                          \"upperTail\" = input$numSuccesses:ceiling(7*1/input$p) >= input$xFixed,\n                                          \"extreme\" = input$numSuccesses:ceiling(7*1/input$p) <= input$x1 | input$numSuccesses:ceiling(7*1/input$p) >= input$x2,\n                                          #NULL\n                            )\n                            }\n             )\n             + scale_fill_manual(values= if(input$probType == \"extreme\"){ \n               if(input$x2 - input$x1 > 1){c(\"#000000\", \"#00BA38\")} \n               else{c(\"#00BA38\",\"#000000\")}}\n               else if (input$probType == \"lowerTail\"){\n                 if ( ceiling(7*1/input$p) <= input$xFixed){c(\"#00BA38\", \"#000000\")}\n                 else{c(\"#000000\",\"#00BA38\")}}\n               else if (input$probType == \"upperTail\"){\n                 if ( pnbinom(input$xFixed - 1, input$numSuccesses, input$p, lower.tail = FALSE) == 1){c(\"#00BA38\", \"#000000\")}\n                 else{c(\"#000000\", \"#00BA38\")}}\n               else if (input$probType == \"between\"){\n                 if (input$x1 <= input$numSuccesses && input$x2 >= ceiling(7*1/input$p))\n                 {c(\"#00BA38\", \"#000000\")}\n                 else{c(\"#000000\", \"#00BA38\")}}\n               else{c(\"#000000\", \"#00BA38\")})\n             + guides(fill=FALSE), \n             \"poi\" = qplot(factor(0:ceiling(4*input$lambda)),\n                           dpois(0:ceiling(4*input$lambda), input$lambda),\n                           xlab = \"Number of Occurrences\", \n                           ylab = \"Probability\", \n                           main = \"Poisson Probability Mass Function\\n\",\n                           geom = \"bar\", \n                           stat = \"identity\",\n                           fill = if(!is.null(input$xFixed)){\n                             switch(input$probType,\n                                    \"between\" = 0:ceiling(4*input$lambda) >= input$x1 & 0:ceiling(4*input$lambda) <= input$x2,\n                                    \"lowerTail\" = 0:ceiling(4*input$lambda) <= input$xFixed,\n                                    \"upperTail\" = 0:ceiling(4*input$lambda) >= input$xFixed,\n                                    \"extreme\" = 0:ceiling(4*input$lambda) <= input$x1 | 0:ceiling(4*input$lambda) >= input$x2,\n                                    #NULL\n                             )\n                           }\n             )\n             #To get the default shading colors to black with green\n             + scale_fill_manual(values= if(input$probType == \"extreme\"){ \n               if(input$x2 - input$x1 > 1){c(\"#000000\", \"#00BA38\")} \n               else{c(\"#00BA38\",\"#000000\")}}\n               else if (input$probType == \"lowerTail\"){\n                 if (ceiling(4*input$lambda) <= input$xFixed){c(\"#00BA38\", \"#000000\")}\n                 else{c(\"#000000\",\"#00BA38\")}}\n               else if (input$probType == \"upperTail\"){\n                 if ( ppois(input$xFixed - 1, input$lambda, lower.tail = FALSE) == 1){c(\"#00BA38\", \"#000000\")}\n                 else{c(\"#000000\", \"#00BA38\")}}\n               else if (input$probType == \"between\"){\n                 if ( input$x1 <= 0 && input$x2 >= ceiling(4*input$lambda))\n                 {c(\"#00BA38\", \"#000000\")}\n                 else{c(\"#000000\", \"#00BA38\")}}\n               else{c(\"#000000\", \"#00BA38\")})\n             + guides(fill=FALSE),\n             \n             #Continuous\n             \"norm\" = switch(input$probType,\n                             \"between\" = normal_prob_area_plot(input$x1, input$x2, \n                                                               mean = input$normMean, sd = sqrt(as.numeric(input$normVar))),\n                             \"lowerTail\" = normal_prob_area_plot(floor(input$normMean - 4 * sqrt(input$normVar)), input$xFixed, \n                                                                 mean = input$normMean, sd = sqrt(as.numeric(input$normVar))),\n                             \"upperTail\" = normal_prob_area_plot(input$xFixed, ceiling(input$normMean + 4 * sqrt(input$normVar)),\n                                                                 mean = input$normMean, sd = sqrt(as.numeric(input$normVar))),\n                             \"extreme\" = normal_prob_area_plot(input$x1, input$x2, \n                                                               mean = input$normMean, sd = sqrt(as.numeric(input$normVar)),\n                                                               extreme = TRUE),\n                             #NULL\n             ),\n             \"unif\" = switch(input$probType,\n                             \"between\" = uniform_prob_area_plot(input$x1, input$x2, \n                                                                min = input$theta1, max = input$theta2),\n                             \"lowerTail\" = uniform_prob_area_plot(input$theta1, input$xFixed, \n                                                                  min = input$theta1, max = input$theta2),\n                             \"upperTail\" = uniform_prob_area_plot(input$xFixed, input$theta2,\n                                                                  min = input$theta1, max = input$theta2),\n                             \"extreme\" = uniform_prob_area_plot(input$x1, input$x2, \n                                                                min = input$theta1, max = input$theta2, \n                                                                extreme = TRUE),\n                             #NULL\n             ),\n             \"exp\" = switch(input$probType,\n                            \"between\" = exp_prob_area_plot(input$x1, input$x2, \n                                                           shape = 1, scale = input$beta),\n                            \"lowerTail\" = exp_prob_area_plot(0, input$xFixed, \n                                                             shape = 1, scale = input$beta),\n                            \"upperTail\" = exp_prob_area_plot(input$xFixed, 1 + 4 * input$beta,\n                                                             shape = 1, scale = input$beta),\n                            \"extreme\" = exp_prob_area_plot(input$x1, input$x2, \n                                                           shape = 1, scale = input$beta, \n                                                           extreme = TRUE),\n                            #NULL\n             ),\n             \"gam\" = switch(input$probType,\n                            \"between\" = gamma_prob_area_plot(input$x1, input$x2, \n                                                             shape = input$alpha, scale = input$beta),\n                            \"lowerTail\" = gamma_prob_area_plot(0, input$xFixed, \n                                                               shape = input$alpha, scale = input$beta),\n                            \"upperTail\" = gamma_prob_area_plot(input$xFixed, input$alpha + 10 * input$beta,\n                                                               shape = input$alpha, scale = input$beta),\n                            \"extreme\" = gamma_prob_area_plot(input$x1, input$x2, \n                                                             shape = input$alpha, scale = input$beta, \n                                                             extreme = TRUE),\n                            #NULL\n             ),\n             # NULL\n      )\n    }\n  })\n  \n  #Produce PDF value for given input value\n  output$distribCalc <- renderUI({\n    if(is.null(input$distrib) || is.null(input$xFixed)) return ()\n    if(input$outType == \"PDF\"){\n      if(is.null(input$percentile) || input$percentile == \"quant\") return ()\n      switch(input$distrib,\n             \"bern\" = withMathJax(sprintf(\"$$\\\\mathbb{P}(X =  %.f ) = %.04f$$\", input$xFixed, \n                                          dbinom(as.numeric(input$xFixed), \n                                                 size = as.numeric(1), \n                                                 prob = as.numeric(input$p)\n                                          )\n             )),\n             \"bin\" = withMathJax(sprintf(\"$$\\\\mathbb{P}(X =  %.f ) = %.04f$$\", input$xFixed, \n                                         dbinom(as.numeric(input$xFixed), \n                                                size = as.numeric(input$numTrials), \n                                                prob = as.numeric(input$p)\n                                         )\n             )),\n             \"dunif\" = withMathJax(sprintf(\"$$\\\\mathbb{P}(X = %.f ) = %.04f$$\", input$xFixed,\n                                           dunifdisc(input$xFixed, \n                                                     as.numeric(input$a), \n                                                     as.numeric(input$b)\n                                           )\n             )),\n             \"geom\" = withMathJax(sprintf(\"$$\\\\mathbb{P}(X =  %.f ) = %.04f$$\", input$xFixed, \n                                          dgeom(as.numeric(input$xFixed)-1, \n                                                prob = as.numeric(input$p)\n                                          )\n             )),\n             \"hgeom\" = withMathJax(sprintf(\"$$\\\\mathbb{P}(X = %.f ) = %.04f$$\", input$xFixed,\n                                           dhyper(as.numeric(input$xFixed), \n                                                  as.numeric(input$favBalls), \n                                                  as.numeric((input$numEvents - input$favBalls)), \n                                                  as.numeric(input$numTrials)\n                                           )\n                                           \n             )),\n             \"nbin\" = withMathJax(sprintf(\"$$\\\\mathbb{P}(X = %.f ) = %.04f$$\", input$xFixed, \n                                          dnbinom(as.numeric(input$xFixed) - as.numeric(input$numSuccesses), \n                                                  input$numSuccesses, \n                                                  input$p)\n             )),\n             \"poi\" = withMathJax(sprintf(\"$$\\\\mathbb{P}(X =  %.f ) = %.04f$$\", input$xFixed, \n                                         dpois(as.numeric(input$xFixed), \n                                               lambda = as.numeric(input$lambda), \n                                         )\n             )),\n             #Continuous\n             \"exp\" = withMathJax(sprintf(\"$$\\\\mathbb{P}(X =  %.f ) = 0 \\\\\\\\ f(X =  %.f ) = %.04f$$\", \n                                         input$xFixed,  \n                                         input$xFixed,\n                                         dgamma(as.numeric(input$xFixed), \n                                                shape = as.numeric(1),\n                                                scale = as.numeric(input$beta)\n                                         )\n             )),\n             \"gam\" = withMathJax(sprintf(\"$$\\\\mathbb{P}(X =  %.f ) = 0 \\\\\\\\ f(X =  %.f ) = %.04f$$\", \n                                         input$xFixed,  \n                                         input$xFixed,\n                                         dgamma(as.numeric(input$xFixed), \n                                                shape = as.numeric(input$alpha),\n                                                scale = as.numeric(input$beta)\n                                         )\n             )),\n             \"norm\" = withMathJax(sprintf(\"$$\\\\mathbb{P}(X =  %.f ) = 0 \\\\\\\\ f(X =  %.f ) = %.04f$$\", \n                                          input$xFixed,  \n                                          input$xFixed,\n                                          dnorm(as.numeric(input$xFixed), \n                                                mean = as.numeric(input$normMean),\n                                                sd = sqrt(as.numeric(input$normVar))\n                                          )\n             )),\n             \"unif\" = withMathJax(sprintf(\"$$\\\\mathbb{P}(X =  %.f ) = 0 \\\\\\\\ f(X =  %.f ) = %.04f$$\", \n                                          input$xFixed,  \n                                          input$xFixed,\n                                          dunif(as.numeric(input$xFixed), \n                                                min = as.numeric(input$theta1),\n                                                max = as.numeric(input$theta2)\n                                          )\n             )),\n             #NULL\n      )\n      #Produce CDF value in nice LaTeX output\n    } else if(input$outType == \"CDF\"){\n      if(is.null(input$distrib) || is.null(input$xFixed)) return ()\n      switch(input$distrib,\n             \"bern\" = withMathJax(sprintf(\"$$F(%.03f) = \\\\mathbb{P}(X \\\\leq  %.03f ) = %.04f$$\", \n                                          input$xFixed, \n                                          input$xFixed, \n                                          pbinom(as.numeric(input$xFixed), \n                                                 size = as.numeric(1), \n                                                 prob = as.numeric(input$p)\n                                          )\n             )),\n             \"bin\" = withMathJax(sprintf(\"$$F(%.03f) = \\\\mathbb{P}(X \\\\leq  %.03f ) = %.04f$$\", \n                                         input$xFixed, \n                                         input$xFixed,\n                                         pbinom(as.numeric(input$xFixed), \n                                                size = as.numeric(input$numTrials), \n                                                prob = as.numeric(input$p)\n                                         )\n             )),\n             \"dunif\" = withMathJax(sprintf(\"$$F(%.03f) = \\\\mathbb{P}(X \\\\leq  %.03f ) = %.04f$$\", \n                                           input$xFixed, \n                                           input$xFixed,\n                                           punifdisc(as.numeric(input$xFixed), \n                                                     as.numeric(input$a), \n                                                     as.numeric(input$b)\n                                           )\n             )),\n             \"geom\" = withMathJax(sprintf(\"$$F(%.03f) = \\\\mathbb{P}(X \\\\leq  %.03f ) = %.04f$$\", \n                                          input$xFixed, \n                                          input$xFixed,\n                                          pgeom(as.numeric(input$xFixed)-1, \n                                                prob = as.numeric(input$p)\n                                          )\n             )),\n             \"hgeom\" = withMathJax(sprintf(\"$$F(%.03f) = \\\\mathbb{P}(X \\\\leq %.03f ) = %.04f$$\", \n                                           input$xFixed,\n                                           input$xFixed,\n                                           phyper(as.numeric(input$xFixed), \n                                                  as.numeric(input$favBalls), \n                                                  as.numeric((input$numEvents - input$favBalls)), \n                                                  as.numeric(input$numTrials)\n                                           )\n                                           \n             )),\n             \"nbin\" = withMathJax(sprintf(\"$$F(%.03f) = \\\\mathbb{P}(X \\\\leq %.03f ) = %.04f$$\", \n                                          input$xFixed,\n                                          input$xFixed,\n                                          pnbinom(as.numeric(input$xFixed) - as.numeric(input$numSuccesses), \n                                                  as.numeric(input$numSuccesses), \n                                                  as.numeric(input$p)\n                                          )\n             )),\n             \"poi\" =  withMathJax(sprintf(\"$$F(%.03f) = \\\\mathbb{P}(X \\\\leq  %.03f ) = %.04f$$\", \n                                          input$xFixed, \n                                          input$xFixed,\n                                          ppois(as.numeric(input$xFixed), \n                                                lambda = as.numeric(input$lambda), \n                                          )\n             )),\n             \n             #Continuous\n             \"exp\" =  withMathJax(sprintf(\"$$F(%.03f) = \\\\mathbb{P}(X \\\\leq  %.03f ) = %.04f$$\", \n                                          input$xFixed, \n                                          input$xFixed,\n                                          pgamma(as.numeric(input$xFixed), \n                                                 shape = as.numeric(1),\n                                                 scale = as.numeric(input$beta),\n                                          )\n             )),\n             \"gam\" =  withMathJax(sprintf(\"$$F(%.03f) = \\\\mathbb{P}(X \\\\leq  %.03f ) = %.04f$$\", \n                                          input$xFixed, \n                                          input$xFixed,\n                                          pgamma(as.numeric(input$xFixed), \n                                                 shape = as.numeric(input$alpha),\n                                                 scale = as.numeric(input$beta),\n                                          )\n             )),             \n             \"norm\" =  withMathJax(sprintf(\"$$F(%.03f) = \\\\mathbb{P}(X \\\\leq  %.03f ) = %.04f$$\", \n                                           input$xFixed, \n                                           input$xFixed,\n                                           pnorm(as.numeric(input$xFixed), \n                                                 mean = as.numeric(input$normMean),\n                                                 sd = sqrt(as.numeric(input$normVar)),\n                                           )\n             )),\n             \"unif\" = withMathJax(sprintf(\"$$F(%.03f) = \\\\mathbb{P}(X \\\\leq  %.03f ) = %.04f$$\", \n                                          input$xFixed, \n                                          input$xFixed,\n                                          punif(as.numeric(input$xFixed), \n                                                min = as.numeric(input$theta1),\n                                                max = as.numeric(input$theta2),\n                                          )\n             )),\n             #NULL\n      )\n    }\n  })\n  \n  #Select percentile option\n  output$percentile <- renderUI({\n    if(is.null(input$outType) || is.null(input$distrib)) return ()\n    if( (input$outType == \"PDF\")) #& (input$distrib == \"norm\") )\n      radioButtons(\"percentile\", \"\\nCalculate:\", selected = \"quant\", inline = TRUE,\n                   c(\"Quantile\" = \"quant\",\n                     \"PDF\" = \"pdf\"))\n  })\n\n  #Prompt for percentile choice\n  output$percentBox <- renderUI({\n    if(is.null(input$percentile)) return ()\n    if(input$outType == \"PDF\"){\n      if(input$percentile == \"quant\"){\n        numericInput(\"quantile\", withMathJax('Enter a percentile (between 0 and 1):'), 0.5, \n                     min = 0.0, max = 1.0, step = 0.1)\n      }\n    }\n  }) \n  \n  #Option to calculate the xvalue corresponding to a percentile.\n  output$percentCalc <- renderUI({\n    if(is.null(input$percentile)) return ()\n    if(input$outType == \"PDF\"){\n    if(input$percentile == \"quant\"){\n      withMathJax(sprintf(\"\\\\(\\\\mathbb{P}(X \\\\le x) = \\\\) %.03f corresponds to an \\\\(x\\\\) value of %.04f \\\\( = F^{-1}(%.03f).\\\\)\", \n                          input$quantile,\n                          switch(input$distrib,\n                                 \"bern\" = qbinom(as.numeric(input$quantile), \n                                                 size = as.numeric(1), \n                                                 prob = as.numeric(input$p)),\n                                 \"bin\" = qbinom(as.numeric(input$quantile), \n                                                size = as.numeric(input$numTrials), \n                                                prob = as.numeric(input$p)),\n                                 \"dunif\" = qunifdisc(input$quantile, \n                                                     as.numeric(input$a), \n                                                     as.numeric(input$b)),\n                                 \"geom\" = qgeom(as.numeric(input$quantile), \n                                                prob = as.numeric(input$p)) + 1,\n                                 \"hgeom\" = qhyper(as.numeric(input$quantile), \n                                                  as.numeric(input$favBalls), \n                                                  as.numeric((input$numEvents - input$favBalls)), \n                                                  as.numeric(input$numTrials) ),\n                                 \"nbin\" = qnbinom(as.numeric(input$quantile), \n                                                  as.numeric(input$numSuccesses), \n                                                  as.numeric(input$p)) + input$numSuccesses,\n                                 \"poi\" = qpois(as.numeric(input$quantile), \n                                               lambda = as.numeric(input$lambda) ),\n                                 #Continuous\n                                 \"exp\" = qgamma(as.numeric(input$quantile), \n                                                shape = as.numeric(1),\n                                                scale = as.numeric(input$beta)),\n                                 \"gam\" = qgamma(as.numeric(input$quantile), \n                                                shape = as.numeric(input$alpha),\n                                                scale = as.numeric(input$beta)),\n                                 \"norm\" = qnorm(as.numeric(input$quantile), \n                                                mean = as.numeric(input$normMean),\n                                                sd = sqrt(as.numeric(input$normVar))),\n                                 \"unif\" = qunif(as.numeric(input$quantile), \n                                                min = as.numeric(input$theta1),\n                                                max = as.numeric(input$theta2)),\n                          ),\n                          input$quantile\n      )) \n    }\n    }\n  })\n  \n  #Output results of probability calculations depending on probType selection\n  output$probCalc <- renderUI({\n    \n    if(is.null(input$distrib) || is.null(input$probType)) return ()\n    \n    if(input$outType == \"Probability\"){\n      if(input$probType == \"between\" && input$distType == \"Discrete\"){\n        if(is.null(input$x1) || is.null(input$x2)) return ()\n        \n        withMathJax(sprintf(\"The probability that \\\\(X\\\\) is between %.03f and %.03f (inclusive) is $$\\\\sum\\\\limits_{i \\\\, = \\\\, %.03f}^{%.03f} \\\\mathbb{P}(X = i) = \\\\mathbb{P}(X \\\\leq %.03f) - \\\\mathbb{P}(X \\\\leq %.03f) = %.04f$$\",\n                            input$x1,\n                            input$x2,\n                            input$x1,\n                            input$x2,\n                            input$x2,\n                            input$x1 - 1, \n                            if(input$x2 <= input$x1) {0}\n                            else{\n                              switch(input$distrib,\n                                     \"bern\" = pbinom(as.numeric(input$x2), size = as.numeric(1), prob = as.numeric(input$p)) \n                                     - pbinom(as.numeric(input$x1) - 1, size = as.numeric(1), prob = as.numeric(input$p)),\n                                     \"bin\" = pbinom(as.numeric(input$x2), size = as.numeric(input$numTrials), \n                                                    prob = as.numeric(input$p)) \n                                     - pbinom(as.numeric(input$x1)-1, size = as.numeric(input$numTrials), \n                                              prob = as.numeric(input$p)),\n                                     \"dunif\" = punifdisc(as.numeric(input$x2), as.numeric(input$a), as.numeric(input$b)) \n                                     - punifdisc(as.numeric(input$x1)-1, as.numeric(input$a), as.numeric(input$b)),\n                                     \"geom\" = pgeom(as.numeric(input$x2)-1, prob = as.numeric(input$p)) \n                                     - pgeom(as.numeric(input$x1)-2, prob = as.numeric(input$p)),\n                                     \"hgeom\" = phyper(as.numeric(input$x2), as.numeric(input$favBalls), \n                                                      as.numeric((input$numEvents - input$favBalls)), as.numeric(input$numTrials)) \n                                     - phyper(as.numeric(input$x1) - 1, as.numeric(input$favBalls), \n                                              as.numeric((input$numEvents - input$favBalls)), as.numeric(input$numTrials)),\n                                     \"nbin\" = pnbinom(as.numeric(input$x2 - input$numSuccesses), \n                                                      as.numeric(input$numSuccesses), as.numeric(input$p)) \n                                     - pnbinom(as.numeric(input$x1 - input$numSuccesses) - 1, \n                                               as.numeric(input$numSuccesses), as.numeric(input$p)),\n                                     \"poi\" = ppois(as.numeric(input$x2), as.numeric(input$lambda)) \n                                     - ppois(as.numeric(input$x1) - 1, as.numeric(input$lambda)),\n                                     NULL\n                              )\n                            }\n        )\n        ) \n      } else if(input$probType == \"between\" && input$distType == \"Continuous\" && !is.null(input$x1) && !is.null(input$x2)){\n        #if(is.null(input$x1) || is.null(input$x2)) return ()\n        withMathJax(sprintf(\"The probability that \\\\(X\\\\) is between %.03f and %.03f (inclusive) is $$\\\\int\\\\limits_{%.03f}^{%.03f} f(x) \\\\, dx = \\\\mathbb{P}(X \\\\leq %.04f) - \\\\mathbb{P}(X \\\\leq %.04f) \\\\approx %.04f$$\",\n                            input$x1,\n                            input$x2,\n                            input$x1,\n                            input$x2,\n                            input$x2,\n                            input$x1,\n                            if(input$x2 <= input$x1) {0}\n                            else{\n                              if(is.null(input$x2) || is.null(input$beta)) return ()\n                              switch(input$distrib,\n                                     \"exp\"  = pgamma(as.numeric(input$x2), shape = as.numeric(1), scale = as.numeric(input$beta)) \n                                     - pgamma(as.numeric(input$x1), shape = as.numeric(1), scale = as.numeric(input$beta)),\n                                     \"gam\"  = pgamma(as.numeric(input$x2), shape = as.numeric(input$alpha), scale = as.numeric(input$beta)) \n                                     - pgamma(as.numeric(input$x1), shape = as.numeric(input$alpha), scale = as.numeric(input$beta)),\n                                     \"norm\" = pnorm(as.numeric(input$x2), mean = as.numeric(input$normMean), sd = sqrt(as.numeric(input$normVar))) \n                                     - pnorm(as.numeric(input$x1), mean = as.numeric(input$normMean), sd = sqrt(as.numeric(input$normVar))),\n                                     \"unif\" = punif(as.numeric(input$x2), as.numeric(input$theta1), as.numeric(input$theta2)) \n                                     - punif(as.numeric(input$x1), as.numeric(input$theta1), as.numeric(input$theta2)), \n                                     NULL\n                              )\n                            }\n        )\n        ) \n      } else if (input$probType == \"lowerTail\" && input$distType == \"Discrete\"){\n        if(is.null(input$xFixed)) return ()\n        withMathJax(sprintf(\"The probability that \\\\(X\\\\) is less than or equal to %.03f is $$\\\\sum_{\\\\large{i \\\\, \\\\le \\\\, %.04f}}\\\\mathbb{P}(X = i) \\\\approx %.04f$$\",\n                            input$xFixed,\n                            input$xFixed,\n                            switch(input$distrib,\n                                   bern = pbinom(as.numeric(input$xFixed), size = as.numeric(1), prob = as.numeric(input$p)),\n                                   bin = pbinom(as.numeric(input$xFixed), size = as.numeric(input$numTrials), prob = as.numeric(input$p)),\n                                   dunif = punifdisc(as.numeric(input$xFixed), as.numeric(input$a), as.numeric(input$b)),\n                                   geom = pgeom(as.numeric(input$xFixed)-1, prob = as.numeric(input$p)),\n                                   hgeom = phyper(as.numeric(input$xFixed), as.numeric(input$favBalls), \n                                                  as.numeric((input$numEvents - input$favBalls)), as.numeric(input$numTrials)),\n                                   nbin = pnbinom(as.numeric(input$xFixed - input$numSuccesses), \n                                                  as.numeric(input$numSuccesses), as.numeric(input$p)),\n                                   poi = ppois(as.numeric(input$xFixed), as.numeric(input$lambda)),\n                                   NULL\n                            )\n        )\n        )        \n      } else if (input$probType == \"lowerTail\" && input$distType == \"Continuous\"){\n        if(is.null(input$xFixed)) return ()\n        withMathJax(sprintf(\"The probability that \\\\(X\\\\) is less than or equal to %.03f is $$\\\\int_{-\\\\infty}^{%.03f} f(x) \\\\, dx \\\\approx %.04f$$\",\n                            input$xFixed,\n                            input$xFixed,\n                            switch(input$distrib,\n                                   exp = pgamma(as.numeric(input$xFixed), shape = as.numeric(1), scale = as.numeric(input$beta)),\n                                   gam = pgamma(as.numeric(input$xFixed), shape = as.numeric(input$alpha), scale = as.numeric(input$beta)),\n                                   norm = pnorm(as.numeric(input$xFixed), mean = as.numeric(input$normMean), \n                                                sd = sqrt(as.numeric(input$normVar))),\n                                   unif = punif(as.numeric(input$xFixed), as.numeric(input$theta1), as.numeric(input$theta2)),\n                                   NULL\n                            )\n        )\n        )        \n      } else if (input$probType == \"upperTail\" && input$distType == \"Discrete\"){\n        if(is.null(input$xFixed)) return ()\n        withMathJax(sprintf(\"The probability that \\\\(X\\\\) is greater than or equal to %.03f is $$1 - \\\\left[ \\\\sum_{\\\\large{i \\\\, \\\\le \\\\, %.04f}}\\\\mathbb{P}(X = i) \\\\right] \\\\approx %.04f$$\",\n                            input$xFixed,\n                            input$xFixed - 1,\n                            switch(input$distrib,\n                                   \"bern\" = 1 - pbinom(as.numeric(input$xFixed)-1, size = as.numeric(1), prob = as.numeric(input$p)),\n                                   \"bin\" = 1 - pbinom(as.numeric(input$xFixed)-1, size = as.numeric(input$numTrials), prob = as.numeric(input$p)),\n                                   \"dunif\" = 1 - punifdisc(as.numeric(input$xFixed)-1, as.numeric(input$a), as.numeric(input$b)),\n                                   \"geom\" = 1 - pgeom(as.numeric(input$xFixed)-2, prob = as.numeric(input$p)),\n                                   \"hgeom\" = 1 - phyper(as.numeric(input$xFixed)-1, as.numeric(input$favBalls), \n                                                        as.numeric((input$numEvents - input$favBalls)), as.numeric(input$numTrials)),\n                                   \"nbin\" = 1 - pnbinom(as.numeric(input$xFixed - input$numSuccesses)-1, \n                                                        as.numeric(input$numSuccesses), as.numeric(input$p)),\n                                   \"poi\" = 1 - ppois(as.numeric(input$xFixed)-1, as.numeric(input$lambda)),\n                                   \"exp\" = 1 - pgamma(as.numeric(input$xFixed), shape = as.numeric(1), scale = as.numeric(input$beta)),\n                                   \"gam\" = 1 - pgamma(as.numeric(input$xFixed), shape = as.numeric(input$alpha), scale = as.numeric(input$beta)),\n                                   \"norm\" = 1 - pnorm(as.numeric(input$xFixed), mean = as.numeric(input$normMean), \n                                                      sd = sqrt(as.numeric(input$normVar))),\n                                   \"unif\" = 1 - punif(as.numeric(input$xFixed), as.numeric(input$theta1), as.numeric(input$theta2)),\n                                   NULL\n                            )\n        )\n        )   \n      } else if (input$probType == \"upperTail\" && input$distType == \"Continuous\"){\n        if(is.null(input$xFixed)) return ()\n        withMathJax(sprintf(\"The probability that \\\\(X\\\\) is greater than or equal to %.03f is $$1 - \\\\left[ \\\\int_{-\\\\infty}^{%.04f}f(x) \\\\, dx \\\\right] \\\\approx %.04f$$\",\n                            input$xFixed,\n                            input$xFixed,\n                            switch(input$distrib,\n                                   \"bern\" = 1 - pbinom(as.numeric(input$xFixed)-1, size = as.numeric(1), prob = as.numeric(input$p)),\n                                   \"bin\" = 1 - pbinom(as.numeric(input$xFixed)-1, size = as.numeric(input$numTrials), prob = as.numeric(input$p)),\n                                   \"dunif\" = 1 - punifdisc(as.numeric(input$xFixed)-1, as.numeric(input$a), as.numeric(input$b)),\n                                   \"geom\" = 1 - pgeom(as.numeric(input$xFixed)-2, prob = as.numeric(input$p)),\n                                   \"hgeom\" = 1 - phyper(as.numeric(input$xFixed)-1, as.numeric(input$favBalls), \n                                                        as.numeric((input$numEvents - input$favBalls)), as.numeric(input$numTrials)),\n                                   \"nbin\" = 1 - pnbinom(as.numeric(input$xFixed - input$numSuccesses)-1, \n                                                        as.numeric(input$numSuccesses), as.numeric(input$p)),\n                                   \"poi\" = 1 - ppois(as.numeric(input$xFixed)-1, as.numeric(input$lambda)),\n                                   \"exp\" = 1 - pgamma(as.numeric(input$xFixed), shape = as.numeric(1), scale = as.numeric(input$beta)),\n                                   \"gam\" = 1 - pgamma(as.numeric(input$xFixed), shape = as.numeric(input$alpha), scale = as.numeric(input$beta)),\n                                   \"norm\" = 1 - pnorm(as.numeric(input$xFixed), mean = as.numeric(input$normMean), \n                                                      sd = sqrt(as.numeric(input$normVar))),\n                                   \"unif\" = 1 - punif(as.numeric(input$xFixed), as.numeric(input$theta1), as.numeric(input$theta2)),\n                                   NULL\n                            )\n        )\n        )   \n      } else if(input$probType == \"extreme\" && input$distType == \"Discrete\"){\n        if(is.null(input$x1) || is.null(input$x2)) return ()\n        withMathJax(sprintf(\"The probability that \\\\(X\\\\) is less than or equal to %.03f or greater than or equal to %.03f is $$\\\\sum\\\\limits_{\\\\large{i \\\\, \\\\leq \\\\, %.03f}} \\\\mathbb{P}(X = i) + \\\\sum\\\\limits_{\\\\large{j \\\\, \\\\geq \\\\, %.03f}} \\\\mathbb{P}(X = j) = \\\\mathbb{P}(X \\\\leq %.03f) + \\\\mathbb{P}(X \\\\geq %.03f) \\\\approx %.04f$$\",\n                            input$x1,\n                            input$x2,\n                            input$x1,\n                            input$x2,\n                            input$x1,\n                            input$x2,\n                            switch(input$distrib,\n                                   \"bern\" = if(input$x2 <= input$x1) \n                                   {1} else{\n                                     1 - pbinom(as.numeric(input$x2)-1, size = as.numeric(1), prob = as.numeric(input$p)) + pbinom(as.numeric(input$x1), size = as.numeric(1), prob = as.numeric(input$p))\n                                   },\n                                   \"bin\" = if(input$x2 <= input$x1) \n                                   {1} else{\n                                     1 - pbinom(as.numeric(input$x2)-1, size = as.numeric(input$numTrials), prob = as.numeric(input$p)) + pbinom(as.numeric(input$x1), size = as.numeric(input$numTrials), prob = as.numeric(input$p), lower.tail = TRUE)\n                                   },\n                                   \"dunif\" = if(input$x2 <= input$x1) \n                                   {1} else{\n                                     1 - punifdisc(as.numeric(input$x2)-1, as.numeric(input$a), as.numeric(input$b)) + punifdisc(as.numeric(input$x1), as.numeric(input$a), as.numeric(input$b))\n                                   },\n                                   \"geom\" = if(input$x2 <= input$x1) \n                                   {1} else{ \n                                     1 - pgeom(as.numeric(input$x2)-2, prob = as.numeric(input$p)) + pgeom(as.numeric(input$x1)-1, prob = as.numeric(input$p))\n                                   },\n                                   \"hgeom\" = if(input$x2 <= input$x1) \n                                   {1} else{\n                                     1 - phyper(as.numeric(input$x2)-1, as.numeric(input$favBalls), as.numeric((input$numEvents - input$favBalls)), as.numeric(input$numTrials)) + phyper(as.numeric(input$x1), as.numeric(input$favBalls), as.numeric((input$numEvents - input$favBalls)), as.numeric(input$numTrials))\n                                   },\n                                   \"nbin\" =if(input$x2 <= input$x1) \n                                   {1} else{\n                                     1 - pnbinom(as.numeric(input$x2 - input$numSuccesses)-1, as.numeric(input$numSuccesses), as.numeric(input$p)) + pnbinom(as.numeric(input$x1), as.numeric(input$numSuccesses), as.numeric(input$p))\n                                   },\n                                   \"poi\" = if(input$x2 <= input$x1) \n                                   {1} else{ \n                                     1 - ppois(as.numeric(input$x2)-1, as.numeric(input$lambda)) + ppois(as.numeric(input$x1), as.numeric(input$lambda))\n                                   },\n                                   NULL\n                            )\n        )\n        ) \n      } else if(input$probType == \"extreme\" && input$distType == \"Continuous\"){\n        if(is.null(input$x1) || is.null(input$x2)) return ()\n        withMathJax(sprintf(\"The probability that \\\\(X\\\\) is less than or equal to %.03f or greater than or equal to %.03f is $$\\\\int\\\\limits_{\\\\large{x \\\\, \\\\leq \\\\, %.03f}} f(x) \\\\, dx + \\\\int\\\\limits_{\\\\large{x \\\\, \\\\geq \\\\, %.03f}} f(x) \\\\, dx = \\\\mathbb{P}(X \\\\leq %.03f) + \\\\mathbb{P}(X \\\\geq %.03f) \\\\approx %.04f$$\",\n                            input$x1,\n                            input$x2,\n                            input$x1,\n                            input$x2,\n                            input$x1,\n                            input$x2,\n                            if(input$x2 <= input$x1) {1}\n                            else{\n                              switch(input$distrib,\n                                     \"exp\" = 1 - pgamma(as.numeric(input$x2), shape = as.numeric(1), scale = as.numeric(input$beta)) \n                                     + pgamma(as.numeric(input$x1), shape = as.numeric(1), scale = as.numeric(input$beta)),\n                                     \"gam\" = 1 - pgamma(as.numeric(input$x2), shape = as.numeric(input$alpha), scale = as.numeric(input$beta)) \n                                     + pgamma(as.numeric(input$x1), shape = as.numeric(input$alpha), scale = as.numeric(input$beta)),\n                                     \"norm\" = 1 - pnorm(as.numeric(input$x2), as.numeric(input$normMean), sqrt(as.numeric(input$normVar))) \n                                     + pnorm(as.numeric(input$x1), as.numeric(input$normMean), sqrt(as.numeric(input$normVar))),\n                                     \"unif\" = 1 - punif(as.numeric(input$x2), as.numeric(input$theta1), as.numeric(input$theta2)) \n                                     + punif(as.numeric(input$x1), as.numeric(input$theta1), as.numeric(input$theta2)),\n                                     NULL\n                              )\n                            }\n        )\n        ) \n      }\n      \n      \n    } #Ends if(input$outType == \"Probability\"){\n  }) #Ends output$probCalcBetween <- renderUI({\n  \n  #Calculate the mean and output results in LaTeX style\n  output$meanCalc <- renderUI({\n    if(is.null(input$distrib)) return ()\n    if(input$outType == \"Mean\"){\n      switch(input$distrib,\n             \"dunif\" = withMathJax(sprintf(\"Mean is $$\\\\mathbb{E}(X) = \\\\frac{a+b}{2} = \\\\frac{%.03f + %.03f}{2} = %.04f$$\",\n                                           input$a,\n                                           input$b,\n                                           (input$a + input$b)/2\n             )), \n             \n             \"bern\" = withMathJax(sprintf(\"Mean is $$\\\\mathbb{E}(X) = %.04f$$\",\n                                          input$p\n             )), \n             \n             \"bin\" = withMathJax(sprintf(\"Mean is $$\\\\mathbb{E}(X) = np = (%.03f) (%.03f) = %.04f$$\",\n                                         input$numTrials,\n                                         input$p,\n                                         (input$numTrials * input$p)\n             )), \n             \n             \"geom\" = withMathJax(sprintf(\"Mean is $$\\\\mathbb{E}(X) = \\\\frac{1}{p} = \\\\frac{1}{%.03f} = %.04f$$\",\n                                          input$p,\n                                          (1 / input$p)\n             )),\n             \n             \"hgeom\" = withMathJax(sprintf(\"Mean is $$\\\\mathbb{E}(X) = \\\\frac{nm}{N} = \\\\frac{%d \\\\cdot %d}{%d} = %.04f$$\",\n                                           input$numTrials,\n                                           input$favBalls,\n                                           input$numEvents,\n                                           (input$numTrials * input$favBalls / input$numEvents)\n             )),\n             \n             \"nbin\" = withMathJax(sprintf(\"Mean is $$\\\\mathbb{E}(X) = \\\\frac{r}{p} = \\\\frac{%d}{%0.3f} = %.04f$$\",\n                                          input$numSuccesses,\n                                          input$p,\n                                          (input$numSuccesses / input$p)\n             )), \n             \n             \"poi\" = withMathJax(sprintf(\"Mean is $$\\\\mathbb{E}(X) = \\\\lambda = %.04f$$\",\n                                         input$lambda\n             )), \n             \n             #Continuous\n             \n             \"exp\" = withMathJax(sprintf(\"Mean is $$\\\\mathbb{E}(X) = \\\\beta = %.04f$$\",\n                                         input$beta\n             )),\n             \n             \"gam\" = withMathJax(sprintf(\"Mean is $$\\\\mathbb{E}(X) = \\\\alpha \\\\beta = %d \\\\cdot %d  =  %.04f$$\",\n                                         input$alpha,\n                                         input$beta,\n                                         (input$alpha * input$beta)\n             )),\n             \n             \"norm\" = withMathJax(sprintf(\"Mean is $$\\\\mathbb{E}(X) = \\\\mu = %.04f$$\",\n                                          input$normMean\n             )), \n             \n             \"unif\" = withMathJax(sprintf(\"Mean is $$\\\\mathbb{E}(X) = \\\\frac{\\\\theta_1+\\\\theta_2}{2} = \\\\frac{%d + %d}{2} = %.04f$$\",\n                                          input$theta1,\n                                          input$theta2,\n                                          (input$theta1 + input$theta2)/2\n             )), \n      )\n    }\n  })\n  \n  #Calculate the variance and output results in LaTeX style\n  output$varCalc <- renderUI({\n    if(is.null(input$distrib)) return ()\n    if(input$outType == \"Variance\"){\n      switch(input$distrib,\n             \"dunif\" = withMathJax(sprintf(\"Variance is $$\\\\mathbb{V}(X) = \\\\frac{(b - a +1)^2 - 1}{12} = \\\\frac{(%.03f - %.03f + 1)^2 - 1}{12} = %.04f$$\",\n                                           input$b,\n                                           input$a,\n                                           ((input$b - input$a + 1)^2 -1)/12\n             )),\n             \n             \"bern\" = withMathJax(sprintf(\"Variance is $$\\\\mathbb{V}(X) = p(1-p) = (%.03f)(1-%.03f) = %.04f$$\",\n                                          input$p,\n                                          input$p,\n                                          (input$p*(1-input$p))\n             )), \n             \n             \"bin\" = withMathJax(sprintf(\"Variance is $$\\\\mathbb{V}(X) = np(1-p) = (%d)(%.03f)(1-%.03f) = %.04f$$\",\n                                         input$numTrials,\n                                         input$p,\n                                         input$p,\n                                         (input$numTrials * input$p * (1-input$p))\n             )), \n             \n             \"geom\" = withMathJax(sprintf(\"Variance is $$\\\\mathbb{V}(X) = \\\\frac{1-p}{p^2} = \\\\frac{1-%.03f}{(%.03f)^2} = %.04f$$\",\n                                          input$p,\n                                          input$p,\n                                          ((1-input$p) / (input$p)^2)\n             )),\n             \n             \"hgeom\" = withMathJax(sprintf(\"Variance is $$\\\\mathbb{V}(X) = \\\\frac{N-n}{N-1}\\\\left(\\\\frac{nm}{N}\\\\right)\\\\left( 1-\\\\frac{m}{N} \\\\right) = \\\\frac{%d-%d}{%d-1}\\\\left(\\\\frac{%d \\\\cdot %d}{%d}\\\\right)\\\\left( 1-\\\\frac{%d}{%d} \\\\right)  = %.04f$$\",\n                                           input$numEvents,\n                                           input$numTrials,\n                                           input$numEvents,\n                                           input$numTrials,\n                                           input$favBalls,\n                                           input$numEvents,\n                                           input$favBalls,\n                                           input$numEvents,\n                                           ((input$numEvents - input$numTrials)/(input$numEvents-1)) * ((input$numTrials * input$favBalls)/(input$numEvents))*(1- input$favBalls/(input$numEvents))\n             )),\n             \n             \"nbin\" = withMathJax(sprintf(\"Variance is $$\\\\mathbb{V}(X) = \\\\frac{r(1-p)}{p^2} = \\\\frac{%d(1-%.03f)}{(%.03f)^2} = %.04f$$\",\n                                          input$numSuccesses,\n                                          input$p,\n                                          input$p,\n                                          ( (input$numSuccesses * (1-input$p) ) / ( (input$p)^2 ) )\n             )),\n             \n             \"poi\" = withMathJax(sprintf(\"Variance is $$\\\\mathbb{V}(X) = \\\\lambda = %.04f$$\",\n                                         input$lambda\n             )), \n             \n             #Continuous\n             \n             \"exp\" = withMathJax(sprintf(\"Mean is $$\\\\mathbb{V}(X) = \\\\beta^2 = %.04f$$\",\n                                         input$beta^2\n             )),\n             \n             \"gam\" = withMathJax(sprintf(\"Variance is $$\\\\mathbb{V}(X) = \\\\alpha \\\\beta^2 = %d (%d)^2  =  %.04f$$\",\n                                         input$alpha,\n                                         input$beta,\n                                         (input$alpha * input$beta^2)\n             )),\n             \n             \"norm\" = withMathJax(sprintf(\"Variance is $$\\\\mathbb{V}(X) = \\\\sigma^2 = %.04f$$\",\n                                          input$normVar\n             )), \n             \n             \"unif\" = withMathJax(sprintf(\"Variance is $$\\\\mathbb{V}(X) = \\\\frac{(\\\\theta_2-\\\\theta_1)^2}{12} = \\\\frac{(%d - %d)^2}{12} = %.04f$$\",\n                                          input$theta2,\n                                          input$theta1,\n                                          (input$theta2 - input$theta1)^2 /12\n             )), \n      )\n    }   \n    \n  })\n  \n  #Close\n})\n\n\n\n\n\n\n\n",
    "created" : 1413294789020.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "827215877",
    "id" : "93F9FD2A",
    "lastKnownWriteTime" : 1408739439,
    "path" : "C:/Users/ismayc/Desktop/Ripon Google Drive/Logan Research/Probability/Shiny/ProbAppOnline/server.R",
    "project_path" : "server.R",
    "properties" : {
    },
    "source_on_save" : false,
    "type" : "r_source"
}