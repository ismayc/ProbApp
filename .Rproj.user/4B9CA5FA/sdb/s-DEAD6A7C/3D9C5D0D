{
    "contents" : "#Create functions for discrete uniform distribution\ndunifdisc<-function(x, min=0, max=1) ifelse(x>=min & x<=max & round(x)==x, 1/(max-min+1), 0)\npunifdisc<-function(q, min=0, max=1) ifelse(q<min, 0, ifelse(q>max, 1, floor(q)/(max-min+1)))\nqunifdisc<-function(p, min=0, max=1) floor(p*(max-min+1))\nrunifdisc<-function(n, min=0, max=1) sample(min:max, n, replace=T)\n\n#Function for plotting PDF and CDF\ndistribPlot <- function(func = dbinom, \n                        range = 0:1, \n                        args = c(1, 0.5), \n                        inputValue = 0,\n                        xlabel = \"Number of Successes\", \n                        distribName = \"Bernoulli\",\n                        numArgs = 2,\n                        paramAdjust = 0,\n                        plotType = \"\",\n                        mainLabel = \"Probability Mass Function\"\n){\n  if(is.null(inputValue)) return ()\n#  if(is.null(args[1]) || is.null(args[2]) || is.null(args[3])) return ()\n   if(numArgs == 1 && is.null(args[1])) return ()\n   else if(numArgs == 2 && (is.null(args[1]) || is.null(args[2]))) return ()\n   else if(numArgs == 3 && (is.null(args[1]) || is.null(args[2])) || is.null(args[3])) return ()\n\n  qplot(factor(range),\n        if (numArgs == 1)\n          func(range - paramAdjust, args[1])\n        else if(numArgs == 2)\n          func(range - paramAdjust, args[1], args[2])\n        else\n          func(range - paramAdjust, args[1], args[2], args[3])\n        ,\n        xlab = xlabel,\n        ylab = paste(plotType, \"Probability\"),\n        main = paste(distribName, mainLabel, \"\\n\"),\n        geom = \"bar\", \n        stat = \"identity\",\n        fill = range == inputValue) +\n    scale_fill_manual(values=c(\"#000000\", \"#00BA38\")) + #To get the default shading colors to black with green                  \n    guides(fill=FALSE) \n}\n\n#Functions for normal distribution shading (Modified from https://gist.github.com/jrnold/6799152) \nnormal_prob_area_plot <- function(lb, ub, mean = 0, sd = 1, limits = c(mean - 4 * sd, mean + 4 * sd), extreme = FALSE){\n  if(is.null(limits[1]) || is.null(limits[2])) return ()\n  x <- seq(limits[1], limits[2], length.out = 100)\n  xmin <- max(lb, limits[1])\n  xmax <- min(ub, limits[2])\n  if(extreme == FALSE){\n    areax1 <- seq(xmin, xmax, length.out = 100)\n    areax2 <- 0 #No area\n  } else{\n    areax1 <- seq(ceiling(mean - 4 * sd), \n                  xmin, \n                  length.out = 100)\n    areax2 <- seq(xmax, \n                  ceiling(mean + 4 * sd), \n                  length.out = 100)\n  }\n  \n  area1 <- data.frame(x = areax1, ymin = 0, ymax = dnorm(areax1, mean = mean, sd = sd))\n  area2 <- data.frame(x = areax2, ymin = 0, ymax = dnorm(areax2, mean = mean, sd = sd))\n  (ggplot()\n   + xlab(\"x\")\n   + ylab(\"Density\")\n   + ggtitle(\"Normal Probability Density Function\\n\")\n   + geom_line(data.frame(x = x, y = dnorm(x, mean = mean, sd = sd)),\n               mapping = aes(x = x, y = y))\n   + geom_ribbon(data = area1, \n                 mapping = aes(x = x, ymin = ymin, ymax = ymax), \n                 fill = \"#00BA38\")\n   + geom_ribbon(data = area2, \n                 mapping = aes(x = x, ymin = ymin, ymax = ymax), \n                 fill = \"#00BA38\")\n   + scale_x_continuous(limits = limits, breaks = \n                                             if(limits[2] - limits[1] <= 15) seq(ceiling(limits[1]), ceiling(limits[2]), 1)\n                                              else seq(ceiling(limits[1]), ceiling(limits[2]), ceiling((limits[2] - limits[1])/15))\n                        )\n   + scale_fill_manual(values=c(\"black\"))\n   + guides(fill=FALSE))\n}\n\nnormal_prob_CDF_plot <- function(lb, ub = mean + 4 * sd, mean = 0, sd = 1, limits = c(mean - 4 * sd, mean + 4 * sd)) {\n  if(is.null(limits[1]) || is.null(limits[2])) return ()\n  x <- seq(limits[1], limits[2], length.out = 100)\n  xmin <- max(lb, limits[1])\n  xmax <- min(ub, limits[2])\n  areax <- seq(xmin, xmax, length.out = 100)\n  area <- data.frame(x = areax, ymin = 0, ymax = dnorm(areax, mean = mean, sd = sd))\n  (ggplot()\n   + xlab(\"x\")\n   + ylab(\"Cumulative Probability\")\n   + ggtitle(\"Normal Cumulative Distribution Function\\n\")\n   + geom_line(data.frame(x = x, y = pnorm(x, mean = mean, sd = sd)),\n               mapping = aes(x = x, y = y))\n   + scale_x_continuous(limits = limits, breaks = \n                          if(limits[2] - limits[1] <= 15) seq(ceiling(limits[1]), ceiling(limits[2]), 1)\n                        else seq(ceiling(limits[1]), ceiling(limits[2]), ceiling((limits[2] - limits[1])/15))\n   )\n  )\n}\n\n#Uniform Distribution\nuniform_prob_area_plot <- function(lb, ub, min, max, limits = c(min, max), extreme = FALSE) {\n  if(is.null(limits[1]) || is.null(limits[2])) return ()\n  x <- seq(limits[1], limits[2], length.out = 100)\n  xmin <- max(lb, limits[1])\n  xmax <- min(ub, limits[2])\n  if(extreme == FALSE){\n    areax1 <- seq(xmin, xmax, length.out = 100)\n    areax2 <- 0 #No area\n  } else{\n    areax1 <- seq(ceiling(min - 1), \n                  xmin, \n                  length.out = 100)\n    areax2 <- seq(xmax, \n                  ceiling(max + 1), \n                  length.out = 100)\n  }\n  \n  area1 <- data.frame(x = areax1, ymin = 0, ymax = dunif(areax1, min = min, max = max))\n  area2 <- data.frame(x = areax2, ymin = 0, ymax = dunif(areax2, min = min, max = max))\n  (ggplot()\n   + xlab(\"x\")\n   + ylab(\"Density\")\n   + ggtitle(\"Uniform Probability Density Function\\n\")\n   + geom_line(data.frame(x = x, y = dunif(x, min = min, max = max)),\n               mapping = aes(x = x, y = y))\n   + geom_ribbon(data = area1, \n                 mapping = aes(x = x, ymin = ymin, ymax = ymax), \n                 fill = \"#00BA38\")\n   + geom_ribbon(data = area2, \n                 mapping = aes(x = x, ymin = ymin, ymax = ymax), \n                 fill = \"#00BA38\")\n   + scale_x_continuous(limits = limits, breaks = \n                          if(limits[2] - limits[1] <= 15) seq(ceiling(limits[1]), ceiling(limits[2]), 1)\n                        else seq(ceiling(limits[1]), ceiling(limits[2]), ceiling((limits[2] - limits[1])/15))\n   )\n   + scale_fill_manual(values=c(\"black\"))\n   + guides(fill=FALSE))\n}\n\nuniform_prob_CDF_plot <- function(lb, ub = max + 1, min, max, limits = c(min - 1, max + 1)) {\n  if(is.null(limits[1]) || is.null(limits[2])) return ()\n  x <- seq(limits[1], limits[2], length.out = 100)\n  xmin <- max(lb, limits[1])\n  xmax <- min(ub, limits[2])\n  areax <- seq(xmin, xmax, length.out = 100)\n  area <- data.frame(x = areax, ymin = 0, ymax = dunif(areax, min = min, max = max))\n  (ggplot()\n   + xlab(\"x\")\n   + ylab(\"Cumulative Probability\")\n   + ggtitle(\"Uniform Cumulative Distribution Function\\n\")\n   + geom_line(data.frame(x = x, y = punif(x, min = min, max = max)),\n               mapping = aes(x = x, y = y))\n   + scale_x_continuous(limits = limits, breaks = \n                          if(limits[2] - limits[1] <= 15) seq(ceiling(limits[1]), ceiling(limits[2]), 1)\n                        else seq(ceiling(limits[1]), ceiling(limits[2]), ceiling((limits[2] - limits[1])/15))\n   )\n  )\n}\n\n#Exponential Distribution\nexp_prob_area_plot <- function(lb, ub, shape = 1, scale = 1, limits = c(0, shape + 4 * scale), extreme = FALSE) {\n  if(is.null(limits[1]) || is.null(limits[2])) return ()\n  x <- seq(limits[1], limits[2], length.out = 100)\n  xmin <- max(lb, limits[1])\n  xmax <- min(ub, limits[2])\n  if(extreme == FALSE){\n    areax1 <- seq(xmin, xmax, length.out = 100)\n    areax2 <- 0 #No area\n  } else{\n    areax1 <- seq(ceiling(0), \n                  xmin, \n                  length.out = 100)\n    areax2 <- seq(xmax, \n                  ceiling(shape + 4 * scale), \n                  length.out = 100)\n  }\n  \n  area1 <- data.frame(x = areax1, ymin = 0, ymax = dgamma(areax1, shape = 1, scale = scale))\n  area2 <- data.frame(x = areax2, ymin = 0, ymax = dgamma(areax2, shape = 1, scale = scale))\n  (ggplot()\n   + xlab(\"x\")\n   + ylab(\"Density\")\n   + ggtitle(\"Exponential Probability Density Function\\n\")\n   + geom_line(data.frame(x = x, y = dgamma(x, shape = 1, scale = scale)),\n               mapping = aes(x = x, y = y))\n   + geom_ribbon(data = area1, \n                 mapping = aes(x = x, ymin = ymin, ymax = ymax), \n                 fill = \"#00BA38\")\n   + geom_ribbon(data = area2, \n                 mapping = aes(x = x, ymin = ymin, ymax = ymax), \n                 fill = \"#00BA38\")\n   + scale_x_continuous(limits = limits, breaks = \n                          if(limits[2] - limits[1] <= 15) seq(ceiling(limits[1]), ceiling(limits[2]), 1)\n                        else seq(ceiling(limits[1]), ceiling(limits[2]), ceiling((limits[2] - limits[1])/15))\n   )\n   + scale_fill_manual(values=c(\"black\"))\n   + guides(fill=FALSE))\n}\n\nexp_prob_CDF_plot <- function(lb, ub = shape + 4 * scale, shape = 1, scale = 1, limits = c(0, shape + 4 * scale)) {\n  if(is.null(limits[1]) || is.null(limits[2])) return ()\n  x <- seq(limits[1], limits[2], length.out = 100)\n  xmin <- max(lb, limits[1])\n  xmax <- min(ub, limits[2])\n  areax <- seq(xmin, xmax, length.out = 100)\n  area <- data.frame(x = areax, ymin = 0, ymax = dgamma(areax, shape = shape, scale = scale))\n  (ggplot()\n   + xlab(\"x\")\n   + ylab(\"Cumulative Probability\")\n   + ggtitle(\"Exponential Cumulative Distribution Function\\n\")\n   + geom_line(data.frame(x = x, y = pgamma(x, shape = shape, scale = scale)),\n               mapping = aes(x = x, y = y))\n   + scale_x_continuous(limits = limits, breaks = \n                          if(limits[2] - limits[1] <= 15) seq(ceiling(limits[1]), ceiling(limits[2]), 1)\n                        else seq(ceiling(limits[1]), ceiling(limits[2]), ceiling((limits[2] - limits[1])/15))\n   )\n  )\n}\n\n#Gamma Distribution\ngamma_prob_area_plot <- function(lb, ub, shape = 1, scale = 1, limits = c(0, shape + 10 * scale), extreme = FALSE) {\n  if(is.null(limits[1]) || is.null(limits[2])) return ()\n  x <- seq(limits[1], limits[2], length.out = 100)\n  xmin <- max(lb, limits[1])\n  xmax <- min(ub, limits[2])\n  if(extreme == FALSE){\n    areax1 <- seq(xmin, xmax, length.out = 100)\n    areax2 <- 0 #No area\n  } else{\n    areax1 <- seq(ceiling(0), \n                  xmin, \n                  length.out = 100)\n    areax2 <- seq(xmax, \n                  ceiling(shape + 10 * scale), \n                  length.out = 100)\n  }\n  \n  area1 <- data.frame(x = areax1, ymin = 0, ymax = dgamma(areax1, shape = shape, scale = scale))\n  area2 <- data.frame(x = areax2, ymin = 0, ymax = dgamma(areax2, shape = shape, scale = scale))\n  (ggplot()\n   + xlab(\"x\")\n   + ylab(\"Density\")\n   + ggtitle(\"Gamma Probability Density Function\\n\")\n   + geom_line(data.frame(x = x, y = dgamma(x, shape = shape, scale = scale)),\n               mapping = aes(x = x, y = y))\n   + geom_ribbon(data = area1, \n                 mapping = aes(x = x, ymin = ymin, ymax = ymax), \n                 fill = \"#00BA38\")\n   + geom_ribbon(data = area2, \n                 mapping = aes(x = x, ymin = ymin, ymax = ymax), \n                 fill = \"#00BA38\")\n   + scale_x_continuous(limits = limits, breaks = \n                          if(limits[2] - limits[1] <= 15) seq(ceiling(limits[1]), ceiling(limits[2]), 1)\n                        else seq(ceiling(limits[1]), ceiling(limits[2]), ceiling((limits[2] - limits[1])/15))\n   )\n   + scale_fill_manual(values=c(\"black\"))\n   + guides(fill=FALSE))\n}\n\ngamma_prob_CDF_plot <- function(lb, ub = shape + 10 * scale, shape = 1, scale = 1, limits = c(0, shape + 10 * scale)) {\n  if(is.null(limits[1]) || is.null(limits[2])) return ()\n  x <- seq(limits[1], limits[2], length.out = 100)\n  xmin <- max(lb, limits[1])\n  xmax <- min(ub, limits[2])\n  areax <- seq(xmin, xmax, length.out = 100)\n  area <- data.frame(x = areax, ymin = 0, ymax = dgamma(areax, shape = shape, scale = scale))\n  (ggplot()\n   + xlab(\"x\")\n   + ylab(\"Cumulative Probability\")\n   + ggtitle(\"Gamma Cumulative Distribution Function\\n\")\n   + geom_line(data.frame(x = x, y = pgamma(x, shape = shape, scale = scale)),\n               mapping = aes(x = x, y = y))\n   + scale_x_continuous(limits = limits, breaks = \n                          if(limits[2] - limits[1] <= 15) seq(ceiling(limits[1]), ceiling(limits[2]), 1)\n                        else seq(ceiling(limits[1]), ceiling(limits[2]), ceiling((limits[2] - limits[1])/15))\n   )\n  )\n}",
    "created" : 1413294786733.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3037430900",
    "id" : "3D9C5D0D",
    "lastKnownWriteTime" : 1407604286,
    "path" : "C:/Users/ismayc/Desktop/Ripon Google Drive/Logan Research/Probability/Shiny/ProbAppOnline/functions.R",
    "project_path" : "functions.R",
    "properties" : {
    },
    "source_on_save" : false,
    "type" : "r_source"
}